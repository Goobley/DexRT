#include "catch_amalgamated.hpp"
#include "CrtafParser.hpp"
#include "Populations.hpp"
#include "Types.hpp"

using Catch::Matchers::WithinRel;
using Catch::Matchers::WithinAbs;

TEST_CASE( "Test Comp Atom", "[comp_atom]" ) {
    ModelAtom<double> model = parse_crtaf_model<double>("../test_atom.yaml");
    const f64 expected_wavelengths[] = {
        50.0,
        52.16717401437727,
        54.33434802875453,
        56.5015220431318,
        58.66869605750907,
        60.83587007188633,
        63.0030440862636,
        65.17021810064087,
        67.33739211501813,
        69.5045661293954,
        71.67174014377267,
        73.83891415814993,
        76.0060881725272,
        78.17326218690447,
        80.34043620128173,
        82.507610215659,
        84.67478423003627,
        86.84195824441353,
        89.0091322587908,
        91.17630627316807,
        102.31672960064368,
        102.40530269345051,
        102.46318907943201,
        102.50102975723273,
        102.52577582638888,
        102.54196800590398,
        102.5525724637867,
        102.5595268122629,
        102.5640967723325,
        102.5671091604391,
        102.56910408410354,
        102.57043436182187,
        102.57133046787247,
        102.57194295670075,
        102.57237017611885,
        102.57267637060744,
        102.57290350707153,
        102.57307899986796,
        102.57322075708316,
        102.57334047695103,
        102.5734601968189,
        102.5736019540341,
        102.57377744683053,
        102.57400458329462,
        102.57431077778321,
        102.57473799720131,
        102.57535048602959,
        102.5762465920802,
        102.57757686979852,
        102.57957179346296,
        102.58258418156956,
        102.58715414163916,
        102.59410849011536,
        102.60471294799808,
        102.62090512751318,
        102.64565119666933,
        102.68349187447005,
        102.74137826045155,
        102.82995135325838,
        105.57227378136533,
        119.96854756273063,
        121.55841096386108,
        121.55861096386108,
        121.55881096386108,
        121.55901096386108,
        121.55921096386108,
        121.55941096386108,
        121.55961096386108,
        121.55981096386108,
        121.56001096386107,
        121.56021096386108,
        121.56041096386107,
        121.56061096386108,
        121.56081096386107,
        121.56101096386108,
        121.56121096386109,
        121.56141096386108,
        121.56161096386109,
        121.56181096386108,
        121.56201096386108,
        121.56221096386108,
        121.56241096386108,
        121.56261096386108,
        121.56281096386108,
        121.56301096386107,
        121.56321096386108,
        121.56341096386109,
        121.56361096386108,
        121.56381096386109,
        121.56401096386108,
        121.56421096386109,
        121.56441096386108,
        121.56461096386109,
        121.56481096386108,
        121.56501096386108,
        121.56521096386108,
        121.56541096386108,
        121.56561096386108,
        121.56581096386108,
        121.56601096386109,
        121.56621096386108,
        121.56641096386109,
        121.56661096386108,
        121.56681096386109,
        121.56701096386108,
        121.56721096386109,
        121.56741096386108,
        121.56761096386109,
        121.56781096386108,
        121.56801096386108,
        121.56821096386108,
        121.56841096386108,
        121.56861096386109,
        121.56881096386108,
        121.56901096386109,
        121.56921096386108,
        121.56941096386109,
        121.56961096386108,
        121.56981096386109,
        121.57001096386108,
        121.57021096386109,
        121.57041096386108,
        121.57061096386109,
        121.57081096386108,
        121.57101096386108,
        121.57121096386109,
        121.57141096386108,
        121.57161096386109,
        121.57181096386108,
        121.57201096386109,
        121.57221096386108,
        121.57241096386109,
        121.57261096386108,
        121.57281096386109,
        121.57301096386108,
        121.57321096386109,
        121.5734109638611,
        121.57361096386109,
        121.57381096386109,
        121.57401096386108,
        121.57421096386109,
        121.57441096386108,
        121.57461096386109,
        121.57481096386108,
        121.57501096386109,
        121.57521096386108,
        121.57541096386109,
        121.57561096386108,
        121.57581096386109,
        121.5760109638611,
        121.57621096386109,
        121.5764109638611,
        121.57661096386109,
        121.57681096386109,
        121.57701096386108,
        121.57721096386109,
        121.57741096386108,
        121.57761096386109,
        121.57781096386108,
        121.57801096386109,
        121.57821096386108,
        121.57841096386109,
        134.36482134409596,
        148.76109512546128,
        163.1573689068266,
        177.55364268819193,
        191.94991646955722,
        206.34619025092255,
        220.74246403228784,
        235.13873781365317,
        249.5350115950185,
        263.9312853763838,
        278.32755915774914,
        292.72383293911446,
        307.1201067204798,
        321.5163805018451,
        335.91265428321043,
        350.3089280645757,
        364.705201845941,
        367.1048995820627,
        399.49647949847525,
        431.88805941488783,
        464.27963933130036,
        496.6712192477129,
        529.0627991641254,
        561.454379080538,
        593.8459589969505,
        626.2375389133631,
        655.1553149770616,
        655.6327361571759,
        655.9362785725029,
        656.1293012609004,
        656.252076095539,
        656.3302004311685,
        656.3799442974305,
        656.411649148241,
        656.4318881535003,
        656.44483931012,
        656.4531582102217,
        656.4585327845682,
        656.4620359050955,
        656.4643495039161,
        656.4659070264303,
        656.4669839764779,
        656.4677554680766,
        656.468332806097,
        656.4687867374411,
        656.4691622298096,
        656.4695377221782,
        656.4699916535222,
        656.4705689915427,
        656.4713404831414,
        656.472417433189,
        656.4739749557032,
        656.4762885545238,
        656.479791675051,
        656.4851662493976,
        656.4934851494993,
        656.506436306119,
        656.5266753113782,
        656.5583801621888,
        656.6081240284508,
        656.6862483640803,
        656.8090231987188,
        657.0020458871163,
        657.3055883024433,
        657.7830094825576,
        658.6291188297756,
        691.0206987461881,
        723.4122786626008,
        755.8038585790132,
        788.1954384954258,
        820.5870184118384
    };


    yakl::init();
    {
        CompAtom<f32, yakl::memHost> comp = to_comp_atom<f32, f64, yakl::memHost>(model);

        REQUIRE(comp.lines.extent(0) == model.lines.size());

        REQUIRE(comp.wavelength.extent(0) == sizeof(expected_wavelengths) / sizeof(expected_wavelengths[0]));

        constexpr fp_t rel_thresh = FP(1e-4);
        fp_t max_err = FP(0.0);
        for (int la = 0; la < comp.wavelength.extent(0); ++la) {
            fp_t diff = std::abs(
                (comp.wavelength(la) - expected_wavelengths[la]) / expected_wavelengths[la]
            ); 
            if (diff > max_err) {
                max_err = diff;
            }
        }

        REQUIRE(max_err < rel_thresh);

#ifdef YAKL_ARCH_CUDA
        CompAtom<f32, yakl::memDevice> comp_dev = to_comp_atom<f32, f64, yakl::memDevice>(model);
#endif
    }
    yakl::finalize();
}