#if !defined(DEXRT_USER_CONFIG_3D_HPP)
#define DEXRT_USER_CONFIG_3D_HPP

#include "UserConfig2d.hpp"


/*== BlockMap ================================================================*/

// The size chunks to consider in the BlockMap. 8 or 16 are typically good
// choices.
constexpr int BLOCK_SIZE_3D = 8;
// The size of the entry (in bits) to compress each tile's mip level into for
// traversal in the MultiResBlockMap. If not using mips, this can be 1.
// The code will raise an error if this is too small.
constexpr int ENTRY_SIZE_3D = 3;

/*== Ray-Marching & Cascades =================================================*/

// The raymarch length on cascade 0
constexpr fp_t C0_LENGTH_3D = FP(6.0);
// constexpr int C0_AZ_RAYS_3D = 48;
// constexpr int C0_POLAR_RAYS_3D = 1;
constexpr int C0_AZ_RAYS_3D = 4;
constexpr int C0_POLAR_RAYS_3D = 4;

// rays = C0 * 2 ** (BRANCHING_EXP * n)
constexpr int AZ_BRANCHING_EXP_3D = 1;
constexpr int POLAR_BRANCHING_EXP_3D = 1;

// rays = C0 * BRANCHING_FACTOR ** n
constexpr int AZ_BRANCHING_FACTOR_3D = 3;
constexpr int POLAR_BRANCHING_FACTOR_3D = 3;

// Whether to use BRANCHING_FACTOR over BRANCHING_EXP. Requires more
// calculation, but allows for e.g. 3.
constexpr bool USE_BRANCHING_FACTOR_3D = false;

// NOTE(cmo): Should probably be interval_scale
// Spatial scale exp: t_i = C0_LENGTH_3D * 2 ** (n * SPATIAL_SCALE_EXP_3D)
constexpr int SPATIAL_SCALE_EXP_3D = 1;
// Spatial length scaling factor: t_i = C0_LENGTH_3D * SPATIAL_SCALE_FACTOR_3D ** n
constexpr int SPATIAL_SCALE_FACTOR_3D = 3;
// Whether to use SCALE_FACTOR over SCALE_EXP. Equivalent to USE_BRANCHING_FACTOR_3D
constexpr bool USE_SCALE_FACTOR_3D = false;

// Whether to run the rays of the last cascade off the grid regardless of where
// they start, to correctly sample the boundary conditions.
constexpr bool LAST_CASCADE_TO_INFTY_3D = true;
// A sensible length (in voxels) that represents the edge of the grid from
// anywhere (it's not actually infinity!). May need to be increased if running
// huge models.
constexpr fp_t LAST_CASCADE_MAX_DIST_3D = FP(2e4);

// Whether to treat the subset of each cascade associated with each ray of C0
// separately. This is a good default with good memory savings, but is
// incompatible with the parallax fixes.
constexpr bool DIR_BY_DIR_3D = false;

enum class AngularQuadratureType {
    TrapezoidalProduct,
    ClarbergOctahedral,
    Healpix
};

// constexpr AngularQuadratureType ANGULAR_QUADRATURE_TYPE = AngularQuadratureType::Healpix;
constexpr AngularQuadratureType ANGULAR_QUADRATURE_TYPE = AngularQuadratureType::ClarbergOctahedral;
constexpr int HEALPIX_ORDER = 1;

constexpr LineCoeffCalc LINE_SCHEME_3D = LineCoeffCalc::CoreAndVoigt;
constexpr int CORE_AND_VOIGT_MAX_LINES_3D = 4;

constexpr bool FORCE_LC_QUADRATURE = false;

#define LC_SET 3

#if LC_SET == 0
// Set A2
constexpr i32 NUM_LC_QUAD = 8;
constexpr fp_t LC_QUAD_X[NUM_LC_QUAD] = { FP(5.7735026e-01), FP(-5.7735026e-01), FP(5.7735026e-01), FP(-5.7735026e-01), FP(5.7735026e-01), FP(-5.7735026e-01), FP(5.7735026e-01), FP(-5.7735026e-01) };
constexpr fp_t LC_QUAD_Y[NUM_LC_QUAD] = { FP(5.7735026e-01), FP(5.7735026e-01), FP(-5.7735026e-01), FP(-5.7735026e-01), FP(5.7735026e-01), FP(5.7735026e-01), FP(-5.7735026e-01), FP(-5.7735026e-01) };
constexpr fp_t LC_QUAD_Z[NUM_LC_QUAD] = { FP(5.7735029e-01), FP(5.7735029e-01), FP(5.7735029e-01), FP(5.7735029e-01), FP(-5.7735029e-01), FP(-5.7735029e-01), FP(-5.7735029e-01), FP(-5.7735029e-01) };
constexpr fp_t LC_WEIGHT[NUM_LC_QUAD] = { FP(1.2500000e-01), FP(1.2500000e-01), FP(1.2500000e-01), FP(1.2500000e-01), FP(1.2500000e-01), FP(1.2500000e-01), FP(1.2500000e-01), FP(1.2500000e-01) };
#elif LC_SET == 1
// Set A4
constexpr i32 NUM_LC_QUAD = 24;
constexpr fp_t LC_QUAD_X[NUM_LC_QUAD] = { FP(8.8191710e-01), FP(3.3333333e-01), FP(3.3333333e-01), FP(-8.8191710e-01), FP(-3.3333333e-01), FP(-3.3333333e-01), FP(8.8191710e-01), FP(3.3333333e-01), FP(3.3333333e-01), FP(-8.8191710e-01), FP(-3.3333333e-01), FP(-3.3333333e-01), FP(8.8191710e-01), FP(3.3333333e-01), FP(3.3333333e-01), FP(-8.8191710e-01), FP(-3.3333333e-01), FP(-3.3333333e-01), FP(8.8191710e-01), FP(3.3333333e-01), FP(3.3333333e-01), FP(-8.8191710e-01), FP(-3.3333333e-01), FP(-3.3333333e-01) };
constexpr fp_t LC_QUAD_Y[NUM_LC_QUAD] = { FP(3.3333333e-01), FP(8.8191710e-01), FP(3.3333333e-01), FP(3.3333333e-01), FP(8.8191710e-01), FP(3.3333333e-01), FP(-3.3333333e-01), FP(-8.8191710e-01), FP(-3.3333333e-01), FP(-3.3333333e-01), FP(-8.8191710e-01), FP(-3.3333333e-01), FP(3.3333333e-01), FP(8.8191710e-01), FP(3.3333333e-01), FP(3.3333333e-01), FP(8.8191710e-01), FP(3.3333333e-01), FP(-3.3333333e-01), FP(-8.8191710e-01), FP(-3.3333333e-01), FP(-3.3333333e-01), FP(-8.8191710e-01), FP(-3.3333333e-01) };
constexpr fp_t LC_QUAD_Z[NUM_LC_QUAD] = { FP(3.3333335e-01), FP(3.3333335e-01), FP(8.8191711e-01), FP(3.3333335e-01), FP(3.3333335e-01), FP(8.8191711e-01), FP(3.3333335e-01), FP(3.3333335e-01), FP(8.8191711e-01), FP(3.3333335e-01), FP(3.3333335e-01), FP(8.8191711e-01), FP(-3.3333335e-01), FP(-3.3333335e-01), FP(-8.8191711e-01), FP(-3.3333335e-01), FP(-3.3333335e-01), FP(-8.8191711e-01), FP(-3.3333335e-01), FP(-3.3333335e-01), FP(-8.8191711e-01), FP(-3.3333335e-01), FP(-3.3333335e-01), FP(-8.8191711e-01) };
constexpr fp_t LC_WEIGHT[NUM_LC_QUAD] = { FP(4.1666667e-02), FP(4.1666667e-02), FP(4.1666667e-02), FP(4.1666667e-02), FP(4.1666667e-02), FP(4.1666667e-02), FP(4.1666667e-02), FP(4.1666667e-02), FP(4.1666667e-02), FP(4.1666667e-02), FP(4.1666667e-02), FP(4.1666667e-02), FP(4.1666667e-02), FP(4.1666667e-02), FP(4.1666667e-02), FP(4.1666667e-02), FP(4.1666667e-02), FP(4.1666667e-02), FP(4.1666667e-02), FP(4.1666667e-02), FP(4.1666667e-02), FP(4.1666667e-02), FP(4.1666667e-02), FP(4.1666667e-02) };
#elif LC_SET == 2
// Set A6
constexpr i32 NUM_LC_QUAD = 48;
constexpr fp_t LC_QUAD_X[NUM_LC_QUAD] = { FP(9.3094934e-01), FP(6.8313005e-01), FP(2.5819889e-01), FP(6.8313005e-01), FP(2.5819889e-01), FP(2.5819889e-01), FP(-9.3094934e-01), FP(-6.8313005e-01), FP(-2.5819889e-01), FP(-6.8313005e-01), FP(-2.5819889e-01), FP(-2.5819889e-01), FP(9.3094934e-01), FP(6.8313005e-01), FP(2.5819889e-01), FP(6.8313005e-01), FP(2.5819889e-01), FP(2.5819889e-01), FP(-9.3094934e-01), FP(-6.8313005e-01), FP(-2.5819889e-01), FP(-6.8313005e-01), FP(-2.5819889e-01), FP(-2.5819889e-01), FP(9.3094934e-01), FP(6.8313005e-01), FP(2.5819889e-01), FP(6.8313005e-01), FP(2.5819889e-01), FP(2.5819889e-01), FP(-9.3094934e-01), FP(-6.8313005e-01), FP(-2.5819889e-01), FP(-6.8313005e-01), FP(-2.5819889e-01), FP(-2.5819889e-01), FP(9.3094934e-01), FP(6.8313005e-01), FP(2.5819889e-01), FP(6.8313005e-01), FP(2.5819889e-01), FP(2.5819889e-01), FP(-9.3094934e-01), FP(-6.8313005e-01), FP(-2.5819889e-01), FP(-6.8313005e-01), FP(-2.5819889e-01), FP(-2.5819889e-01) };
constexpr fp_t LC_QUAD_Y[NUM_LC_QUAD] = { FP(2.5819889e-01), FP(6.8313005e-01), FP(9.3094934e-01), FP(2.5819889e-01), FP(6.8313005e-01), FP(2.5819889e-01), FP(2.5819889e-01), FP(6.8313005e-01), FP(9.3094934e-01), FP(2.5819889e-01), FP(6.8313005e-01), FP(2.5819889e-01), FP(-2.5819889e-01), FP(-6.8313005e-01), FP(-9.3094934e-01), FP(-2.5819889e-01), FP(-6.8313005e-01), FP(-2.5819889e-01), FP(-2.5819889e-01), FP(-6.8313005e-01), FP(-9.3094934e-01), FP(-2.5819889e-01), FP(-6.8313005e-01), FP(-2.5819889e-01), FP(2.5819889e-01), FP(6.8313005e-01), FP(9.3094934e-01), FP(2.5819889e-01), FP(6.8313005e-01), FP(2.5819889e-01), FP(2.5819889e-01), FP(6.8313005e-01), FP(9.3094934e-01), FP(2.5819889e-01), FP(6.8313005e-01), FP(2.5819889e-01), FP(-2.5819889e-01), FP(-6.8313005e-01), FP(-9.3094934e-01), FP(-2.5819889e-01), FP(-6.8313005e-01), FP(-2.5819889e-01), FP(-2.5819889e-01), FP(-6.8313005e-01), FP(-9.3094934e-01), FP(-2.5819889e-01), FP(-6.8313005e-01), FP(-2.5819889e-01) };
constexpr fp_t LC_QUAD_Z[NUM_LC_QUAD] = { FP(2.5819888e-01), FP(2.5819890e-01), FP(2.5819888e-01), FP(6.8313005e-01), FP(6.8313005e-01), FP(9.3094934e-01), FP(2.5819888e-01), FP(2.5819890e-01), FP(2.5819888e-01), FP(6.8313005e-01), FP(6.8313005e-01), FP(9.3094934e-01), FP(2.5819888e-01), FP(2.5819890e-01), FP(2.5819888e-01), FP(6.8313005e-01), FP(6.8313005e-01), FP(9.3094934e-01), FP(2.5819888e-01), FP(2.5819890e-01), FP(2.5819888e-01), FP(6.8313005e-01), FP(6.8313005e-01), FP(9.3094934e-01), FP(-2.5819888e-01), FP(-2.5819890e-01), FP(-2.5819888e-01), FP(-6.8313005e-01), FP(-6.8313005e-01), FP(-9.3094934e-01), FP(-2.5819888e-01), FP(-2.5819890e-01), FP(-2.5819888e-01), FP(-6.8313005e-01), FP(-6.8313005e-01), FP(-9.3094934e-01), FP(-2.5819888e-01), FP(-2.5819890e-01), FP(-2.5819888e-01), FP(-6.8313005e-01), FP(-6.8313005e-01), FP(-9.3094934e-01), FP(-2.5819888e-01), FP(-2.5819890e-01), FP(-2.5819888e-01), FP(-6.8313005e-01), FP(-6.8313005e-01), FP(-9.3094934e-01) };
constexpr fp_t LC_WEIGHT[NUM_LC_QUAD] = { FP(2.2916666e-02), FP(1.8750000e-02), FP(2.2916666e-02), FP(1.8750000e-02), FP(1.8750000e-02), FP(2.2916666e-02), FP(2.2916666e-02), FP(1.8750000e-02), FP(2.2916666e-02), FP(1.8750000e-02), FP(1.8750000e-02), FP(2.2916666e-02), FP(2.2916666e-02), FP(1.8750000e-02), FP(2.2916666e-02), FP(1.8750000e-02), FP(1.8750000e-02), FP(2.2916666e-02), FP(2.2916666e-02), FP(1.8750000e-02), FP(2.2916666e-02), FP(1.8750000e-02), FP(1.8750000e-02), FP(2.2916666e-02), FP(2.2916666e-02), FP(1.8750000e-02), FP(2.2916666e-02), FP(1.8750000e-02), FP(1.8750000e-02), FP(2.2916666e-02), FP(2.2916666e-02), FP(1.8750000e-02), FP(2.2916666e-02), FP(1.8750000e-02), FP(1.8750000e-02), FP(2.2916666e-02), FP(2.2916666e-02), FP(1.8750000e-02), FP(2.2916666e-02), FP(1.8750000e-02), FP(1.8750000e-02), FP(2.2916666e-02), FP(2.2916666e-02), FP(1.8750000e-02), FP(2.2916666e-02), FP(1.8750000e-02), FP(1.8750000e-02), FP(2.2916666e-02) };
#elif LC_SET == 3
// Set A8
constexpr i32 NUM_LC_QUAD = 80;
constexpr fp_t LC_QUAD_X[NUM_LC_QUAD] = { FP(9.5118973e-01), FP(7.8679579e-01), FP(5.7735027e-01), FP(2.1821789e-01), FP(7.8679579e-01), FP(5.7735027e-01), FP(2.1821789e-01), FP(5.7735027e-01), FP(2.1821789e-01), FP(2.1821789e-01), FP(-9.5118973e-01), FP(-7.8679579e-01), FP(-5.7735027e-01), FP(-2.1821789e-01), FP(-7.8679579e-01), FP(-5.7735027e-01), FP(-2.1821789e-01), FP(-5.7735027e-01), FP(-2.1821789e-01), FP(-2.1821789e-01), FP(9.5118973e-01), FP(7.8679579e-01), FP(5.7735027e-01), FP(2.1821789e-01), FP(7.8679579e-01), FP(5.7735027e-01), FP(2.1821789e-01), FP(5.7735027e-01), FP(2.1821789e-01), FP(2.1821789e-01), FP(-9.5118973e-01), FP(-7.8679579e-01), FP(-5.7735027e-01), FP(-2.1821789e-01), FP(-7.8679579e-01), FP(-5.7735027e-01), FP(-2.1821789e-01), FP(-5.7735027e-01), FP(-2.1821789e-01), FP(-2.1821789e-01), FP(9.5118973e-01), FP(7.8679579e-01), FP(5.7735027e-01), FP(2.1821789e-01), FP(7.8679579e-01), FP(5.7735027e-01), FP(2.1821789e-01), FP(5.7735027e-01), FP(2.1821789e-01), FP(2.1821789e-01), FP(-9.5118973e-01), FP(-7.8679579e-01), FP(-5.7735027e-01), FP(-2.1821789e-01), FP(-7.8679579e-01), FP(-5.7735027e-01), FP(-2.1821789e-01), FP(-5.7735027e-01), FP(-2.1821789e-01), FP(-2.1821789e-01), FP(9.5118973e-01), FP(7.8679579e-01), FP(5.7735027e-01), FP(2.1821789e-01), FP(7.8679579e-01), FP(5.7735027e-01), FP(2.1821789e-01), FP(5.7735027e-01), FP(2.1821789e-01), FP(2.1821789e-01), FP(-9.5118973e-01), FP(-7.8679579e-01), FP(-5.7735027e-01), FP(-2.1821789e-01), FP(-7.8679579e-01), FP(-5.7735027e-01), FP(-2.1821789e-01), FP(-5.7735027e-01), FP(-2.1821789e-01), FP(-2.1821789e-01) };
constexpr fp_t LC_QUAD_Y[NUM_LC_QUAD] = { FP(2.1821789e-01), FP(5.7735027e-01), FP(7.8679579e-01), FP(9.5118973e-01), FP(2.1821789e-01), FP(5.7735027e-01), FP(7.8679579e-01), FP(2.1821789e-01), FP(5.7735027e-01), FP(2.1821789e-01), FP(2.1821789e-01), FP(5.7735027e-01), FP(7.8679579e-01), FP(9.5118973e-01), FP(2.1821789e-01), FP(5.7735027e-01), FP(7.8679579e-01), FP(2.1821789e-01), FP(5.7735027e-01), FP(2.1821789e-01), FP(-2.1821789e-01), FP(-5.7735027e-01), FP(-7.8679579e-01), FP(-9.5118973e-01), FP(-2.1821789e-01), FP(-5.7735027e-01), FP(-7.8679579e-01), FP(-2.1821789e-01), FP(-5.7735027e-01), FP(-2.1821789e-01), FP(-2.1821789e-01), FP(-5.7735027e-01), FP(-7.8679579e-01), FP(-9.5118973e-01), FP(-2.1821789e-01), FP(-5.7735027e-01), FP(-7.8679579e-01), FP(-2.1821789e-01), FP(-5.7735027e-01), FP(-2.1821789e-01), FP(2.1821789e-01), FP(5.7735027e-01), FP(7.8679579e-01), FP(9.5118973e-01), FP(2.1821789e-01), FP(5.7735027e-01), FP(7.8679579e-01), FP(2.1821789e-01), FP(5.7735027e-01), FP(2.1821789e-01), FP(2.1821789e-01), FP(5.7735027e-01), FP(7.8679579e-01), FP(9.5118973e-01), FP(2.1821789e-01), FP(5.7735027e-01), FP(7.8679579e-01), FP(2.1821789e-01), FP(5.7735027e-01), FP(2.1821789e-01), FP(-2.1821789e-01), FP(-5.7735027e-01), FP(-7.8679579e-01), FP(-9.5118973e-01), FP(-2.1821789e-01), FP(-5.7735027e-01), FP(-7.8679579e-01), FP(-2.1821789e-01), FP(-5.7735027e-01), FP(-2.1821789e-01), FP(-2.1821789e-01), FP(-5.7735027e-01), FP(-7.8679579e-01), FP(-9.5118973e-01), FP(-2.1821789e-01), FP(-5.7735027e-01), FP(-7.8679579e-01), FP(-2.1821789e-01), FP(-5.7735027e-01), FP(-2.1821789e-01) };
constexpr fp_t LC_QUAD_Z[NUM_LC_QUAD] = { FP(2.1821790e-01), FP(2.1821790e-01), FP(2.1821790e-01), FP(2.1821790e-01), FP(5.7735027e-01), FP(5.7735027e-01), FP(5.7735027e-01), FP(7.8679579e-01), FP(7.8679579e-01), FP(9.5118973e-01), FP(2.1821790e-01), FP(2.1821790e-01), FP(2.1821790e-01), FP(2.1821790e-01), FP(5.7735027e-01), FP(5.7735027e-01), FP(5.7735027e-01), FP(7.8679579e-01), FP(7.8679579e-01), FP(9.5118973e-01), FP(2.1821790e-01), FP(2.1821790e-01), FP(2.1821790e-01), FP(2.1821790e-01), FP(5.7735027e-01), FP(5.7735027e-01), FP(5.7735027e-01), FP(7.8679579e-01), FP(7.8679579e-01), FP(9.5118973e-01), FP(2.1821790e-01), FP(2.1821790e-01), FP(2.1821790e-01), FP(2.1821790e-01), FP(5.7735027e-01), FP(5.7735027e-01), FP(5.7735027e-01), FP(7.8679579e-01), FP(7.8679579e-01), FP(9.5118973e-01), FP(-2.1821790e-01), FP(-2.1821790e-01), FP(-2.1821790e-01), FP(-2.1821790e-01), FP(-5.7735027e-01), FP(-5.7735027e-01), FP(-5.7735027e-01), FP(-7.8679579e-01), FP(-7.8679579e-01), FP(-9.5118973e-01), FP(-2.1821790e-01), FP(-2.1821790e-01), FP(-2.1821790e-01), FP(-2.1821790e-01), FP(-5.7735027e-01), FP(-5.7735027e-01), FP(-5.7735027e-01), FP(-7.8679579e-01), FP(-7.8679579e-01), FP(-9.5118973e-01), FP(-2.1821790e-01), FP(-2.1821790e-01), FP(-2.1821790e-01), FP(-2.1821790e-01), FP(-5.7735027e-01), FP(-5.7735027e-01), FP(-5.7735027e-01), FP(-7.8679579e-01), FP(-7.8679579e-01), FP(-9.5118973e-01), FP(-2.1821790e-01), FP(-2.1821790e-01), FP(-2.1821790e-01), FP(-2.1821790e-01), FP(-5.7735027e-01), FP(-5.7735027e-01), FP(-5.7735027e-01), FP(-7.8679579e-01), FP(-7.8679579e-01), FP(-9.5118973e-01) };
constexpr fp_t LC_WEIGHT[NUM_LC_QUAD] = { FP(1.5872672e-02), FP(1.1422941e-02), FP(1.1422941e-02), FP(1.5872672e-02), FP(1.1422941e-02), FP(8.8443362e-03), FP(1.1422941e-02), FP(1.1422941e-02), FP(1.1422941e-02), FP(1.5872672e-02), FP(1.5872672e-02), FP(1.1422941e-02), FP(1.1422941e-02), FP(1.5872672e-02), FP(1.1422941e-02), FP(8.8443362e-03), FP(1.1422941e-02), FP(1.1422941e-02), FP(1.1422941e-02), FP(1.5872672e-02), FP(1.5872672e-02), FP(1.1422941e-02), FP(1.1422941e-02), FP(1.5872672e-02), FP(1.1422941e-02), FP(8.8443362e-03), FP(1.1422941e-02), FP(1.1422941e-02), FP(1.1422941e-02), FP(1.5872672e-02), FP(1.5872672e-02), FP(1.1422941e-02), FP(1.1422941e-02), FP(1.5872672e-02), FP(1.1422941e-02), FP(8.8443362e-03), FP(1.1422941e-02), FP(1.1422941e-02), FP(1.1422941e-02), FP(1.5872672e-02), FP(1.5872672e-02), FP(1.1422941e-02), FP(1.1422941e-02), FP(1.5872672e-02), FP(1.1422941e-02), FP(8.8443362e-03), FP(1.1422941e-02), FP(1.1422941e-02), FP(1.1422941e-02), FP(1.5872672e-02), FP(1.5872672e-02), FP(1.1422941e-02), FP(1.1422941e-02), FP(1.5872672e-02), FP(1.1422941e-02), FP(8.8443362e-03), FP(1.1422941e-02), FP(1.1422941e-02), FP(1.1422941e-02), FP(1.5872672e-02), FP(1.5872672e-02), FP(1.1422941e-02), FP(1.1422941e-02), FP(1.5872672e-02), FP(1.1422941e-02), FP(8.8443362e-03), FP(1.1422941e-02), FP(1.1422941e-02), FP(1.1422941e-02), FP(1.5872672e-02), FP(1.5872672e-02), FP(1.1422941e-02), FP(1.1422941e-02), FP(1.5872672e-02), FP(1.1422941e-02), FP(8.8443362e-03), FP(1.1422941e-02), FP(1.1422941e-02), FP(1.1422941e-02), FP(1.5872672e-02) };
#endif


#else
#endif